package proxy

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/txthinking/socks5"
	"github.com/virink/virzz/common"
)

// Socks5Server -
func Socks5Server(host string, port int, front bool, username, password string) error {
	// fmt.Sprintf("%s:%d", host, port)
	s, err := socks5.NewClassicServer(fmt.Sprintf("%s:%d", host, port), "0.0.0.0", username, password, 0, 60)
	if err != nil {
		return err
	}
	if front {
		interrupt := make(chan os.Signal, 1)
		signal.Notify(interrupt, os.Interrupt, os.Kill, syscall.SIGTERM)
		go func() {
			if err := s.ListenAndServe(nil); err != nil {
				common.Logger.Error("HTTP server listen: %s", err)
				interrupt <- os.Kill
			}
		}()
		<-interrupt
		if err := s.Shutdown(); err != nil {
			common.Logger.Error("Shutdown Error: %s", err)
		}
		return nil
	}
	return s.ListenAndServe(nil)
}
